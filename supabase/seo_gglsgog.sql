-- Schema for the `seo_gglsgog` table used by the admin dashboard.
-- Run this script in the Supabase SQL editor or psql connected to your project.

-- Create the table to hold SEO metadata for every route.
create table if not exists public.seo_gglsgog (
  id bigint generated by default as identity primary key,
  path text not null unique,
  title text,
  description text,
  keywords text,
  extra_meta jsonb,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now())
);

-- Keep updated_at fresh on every modification.
create or replace function public.set_current_timestamp_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = timezone('utc', now());
  return new;
end;
$$;

drop trigger if exists set_public_seo_gglsgog_updated_at on public.seo_gglsgog;
create trigger set_public_seo_gglsgog_updated_at
before update on public.seo_gglsgog
for each row
execute procedure public.set_current_timestamp_updated_at();

-- Helpful index for lookups by path.
create index if not exists seo_gglsgog_path_idx on public.seo_gglsgog (path);

-- Enable row level security and open policies for the dashboard to perform CRUD.
alter table public.seo_gglsgog enable row level security;

do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'seo_gglsgog'
      and policyname = 'Allow SEO reads'
  ) then
    create policy "Allow SEO reads"
      on public.seo_gglsgog
      for select
      using (true);
  end if;

  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename = 'seo_gglsgog'
      and policyname = 'Allow SEO writes'
  ) then
    create policy "Allow SEO writes"
      on public.seo_gglsgog
      for all
      using (true)
      with check (true);
  end if;
end $$;
